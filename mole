#!/bin/bash
# Mole - Main Entry Point
# A comprehensive macOS maintenance tool
#
# üßπ Clean - Remove junk files and optimize system
# üóëÔ∏è  Uninstall - Remove applications completely
# üìä Analyze - Interactive disk space explorer
#
# Usage:
#   ./mole                         # Interactive main menu
#   ./mole clean                   # Direct clean mode
#   ./mole uninstall               # Direct uninstall mode
#   ./mole analyze                 # Disk space explorer
#   ./mole --help                  # Show help

set -euo pipefail

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source common functions
source "$SCRIPT_DIR/lib/common.sh"

# Version info
VERSION="1.6.4"
MOLE_TAGLINE="—Ä–æ–µ—Ç –≥–ª—É–±–æ–∫–æ, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –≤–∞—à Mac."

# Check for updates (non-blocking, cached)
check_for_updates() {
    local cache="$HOME/.cache/mole/version_check"
    local msg_cache="$HOME/.cache/mole/update_message"
    mkdir -p "$(dirname "$cache")" 2>/dev/null

    # Skip if checked within 24 hours
    if [[ -f "$cache" ]]; then
        local age=$(($(date +%s) - $(stat -f%m "$cache" 2>/dev/null || echo 0)))
        [[ $age -lt 86400 ]] && return
    fi

    # Background version check (save to file, don't output)
    (
        local latest=$(curl -fsSL --connect-timeout 2 --max-time 3 -H "Cache-Control: no-cache" \
            "https://raw.githubusercontent.com/tw93/mole/main/mole" 2>/dev/null | \
            grep '^VERSION=' | head -1 | sed 's/VERSION="\(.*\)"/\1/')

        if [[ -n "$latest" && "$VERSION" != "$latest" && "$(printf '%s\n' "$VERSION" "$latest" | sort -V | head -1)" == "$VERSION" ]]; then
            echo -e "${YELLOW}üì¢ –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è ${GREEN}${latest}${YELLOW} (—Ç–µ–∫—É—â–∞—è: ${VERSION})\n   –ó–∞–ø—É—Å—Ç–∏—Ç–µ ${GREEN}mole update${YELLOW} –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è${NC}" > "$msg_cache"
        else
            echo -n > "$msg_cache"
        fi
        touch "$cache" 2>/dev/null
    ) &
    disown 2>/dev/null || true
}

# Show update notification if available
show_update_notification() {
    local msg_cache="$HOME/.cache/mole/update_message"
    if [[ -f "$msg_cache" && -s "$msg_cache" ]]; then
        cat "$msg_cache"
        echo
    fi
}

show_brand_banner() {
    cat << EOF
${GREEN} __  __       _      ${NC}
${GREEN}|  \/  | ___ | | ___ ${NC}
${GREEN}| |\/| |/ _ \| |/ _ \\${NC}
${GREEN}| |  | | (_) | |  __/${NC}  ${BLUE}https://github.com/Kuzko-coder/Mole-main${NC}
${GREEN}|_|  |_|\___/|_|\___|${NC}  ${GREEN}${MOLE_TAGLINE}${NC}

EOF
}

animate_mole_intro() {
    # Skip animation if stdout isn't a TTY (non-interactive)
    if [[ ! -t 1 ]]; then
        return
    fi

    clear_screen
    printf '\n'
    hide_cursor

    local -a mole_lines=()
    while IFS= read -r line; do
        mole_lines+=("$line")
    done <<'EOF'
        /\_/\
   ____/ o o \
 /~____  =o= /
(______)__m_m)
        /   \
     __/ /\ \__
    /__/  \__\_
EOF

    local idx
    local body_cutoff=4
    local body_color="${PURPLE}"
    local ground_color="${GREEN}"
    for idx in "${!mole_lines[@]}"; do
        if (( idx < body_cutoff )); then
            printf "%s\n" "${body_color}${mole_lines[$idx]}${NC}"
        else
            printf "%s\n" "${ground_color}${mole_lines[$idx]}${NC}"
        fi
        sleep 0.1
    done

    printf '\n'
    sleep 0.5

    printf '\033[2J\033[H'
    show_cursor
}

show_version() {
    printf 'Mole –≤–µ—Ä—Å–∏—è %s\n' "$VERSION"
}

show_help() {
    show_brand_banner
    echo
    printf "%s%s%s\n" "$BLUE" "–ö–û–ú–ê–ù–î–´" "$NC"
    printf "  %s%-28s%s %s\n" "$GREEN" "mo" "$NC" "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"
    printf "  %s%-28s%s %s\n" "$GREEN" "mo clean" "$NC" "–ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    printf "  %s%-28s%s %s\n" "$GREEN" "mo clean --dry-run" "$NC" "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—á–∏—Å—Ç–∫–∏ (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)"
    printf "  %s%-28s%s %s\n" "$GREEN" "mo clean --whitelist" "$NC" "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º–∏ –∫—ç—à–∞–º–∏"
    printf "  %s%-28s%s %s\n" "$GREEN" "mo uninstall" "$NC" "–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
    printf "  %s%-28s%s %s\n" "$GREEN" "mo analyze" "$NC" "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"
    printf "  %s%-28s%s %s\n" "$GREEN" "mo update" "$NC" "–û–±–Ω–æ–≤–∏—Ç—å Mole –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏"
    printf "  %s%-28s%s %s\n" "$GREEN" "mo remove" "$NC" "–£–¥–∞–ª–∏—Ç—å Mole –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
    printf "  %s%-28s%s %s\n" "$GREEN" "mo --version" "$NC" "–ü–æ–∫–∞–∑–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é"
    printf "  %s%-28s%s %s\n" "$GREEN" "mo --help" "$NC" "–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏"

    printf "\n%s%s%s\n" "$BLUE" "–ü–û–î–†–û–ë–ù–ï–ï" "$NC"
    printf "  https://github.com/Kuzko-coder/Mole-main\n\n"
}

# Simple update function
update_mole() {
    # Check if installed via Homebrew
    if command -v brew >/dev/null 2>&1 && brew list mole >/dev/null 2>&1; then
        update_via_homebrew "$VERSION"
        exit 0
    fi

    # Download and run installer with progress
    echo -e "${BLUE}‚óé${NC} –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏..."

    local installer_url="https://raw.githubusercontent.com/Kuzko-coder/Mole-main/main/install.sh"
    local tmp_installer
    tmp_installer="$(mktemp)" || { log_error "Update failed"; exit 1; }

    # Download installer with progress
    if command -v curl >/dev/null 2>&1; then
        if ! curl -fsSL --connect-timeout 10 --max-time 60 "$installer_url" -o "$tmp_installer" 2>&1; then
            rm -f "$tmp_installer"
            log_error "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ."
            exit 1
        fi
    elif command -v wget >/dev/null 2>&1; then
        if ! wget --timeout=10 --tries=3 -qO "$tmp_installer" "$installer_url" 2>&1; then
            rm -f "$tmp_installer"
            log_error "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ."
            exit 1
        fi
    else
        rm -f "$tmp_installer"
        log_error "–¢—Ä–µ–±—É–µ—Ç—Å—è curl –∏–ª–∏ wget"
        exit 1
    fi

    chmod +x "$tmp_installer"

    # Determine install directory
    local mole_path
    mole_path="$(command -v mole 2>/dev/null || echo "$0")"
    local install_dir
    install_dir="$(cd "$(dirname "$mole_path")" && pwd)"

    echo -e "${BLUE}‚óé${NC} –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."

    # Run installer with visible output (but capture for error handling)
    local install_output
    if install_output=$("$tmp_installer" --prefix "$install_dir" --config "$HOME/.config/mole" --update 2>&1); then
        echo "$install_output" | grep -Ev "^$" || true
        local new_version
        new_version=$("$mole_path" --version 2>/dev/null | awk 'NF {print $NF}' || echo "")
        echo -e "${GREEN}‚úì${NC} –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ (${new_version:-–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ})"
    else
        # Retry without --update flag
        if install_output=$("$tmp_installer" --prefix "$install_dir" --config "$HOME/.config/mole" 2>&1); then
            echo "$install_output" | grep -Ev "^$" || true
            local new_version
            new_version=$("$mole_path" --version 2>/dev/null | awk 'NF {print $NF}' || echo "")
            echo -e "${GREEN}‚úì${NC} –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ (${new_version:-–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ})"
        else
            rm -f "$tmp_installer"
            log_error "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å"
            echo "$install_output" | tail -10 >&2  # Show last 10 lines of error
            exit 1
        fi
    fi

    rm -f "$tmp_installer"
    rm -f "$HOME/.cache/mole/version_check" "$HOME/.cache/mole/update_message"
}

# Remove Mole from system
remove_mole() {
    clear
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  –£–¥–∞–ª–µ–Ω–∏–µ Mole${NC}"
    echo ""

    # Detect all installations
    local is_homebrew=false
    local -a manual_installs=()
    local -a alias_installs=()

    # Check Homebrew
    if command -v brew >/dev/null 2>&1 && brew list mole >/dev/null 2>&1; then
        is_homebrew=true
    fi

    # Check common manual install locations
    local -a common_paths=(
        "/usr/local/bin/mole"
        "$HOME/.local/bin/mole"
        "/opt/local/bin/mole"
    )

    for path in "${common_paths[@]}"; do
        if [[ -f "$path" ]]; then
            # Check if it's not a Homebrew symlink
            if [[ ! -L "$path" ]] || ! readlink "$path" | grep -q "Cellar/mole"; then
                manual_installs+=("$path")
            fi
        fi
    done

    local -a alias_candidates=(
        "/usr/local/bin/mo"
        "$HOME/.local/bin/mo"
        "/opt/local/bin/mo"
    )

    for alias in "${alias_candidates[@]}"; do
        if [[ -f "$alias" ]]; then
            alias_installs+=("$alias")
        fi
    done

    # Show what will be removed
    echo "–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:"
    echo ""

    if [[ "$is_homebrew" == "true" ]]; then
        echo -e "  ${GREEN}‚úì${NC} Mole (—á–µ—Ä–µ–∑ Homebrew)"
    fi

    if [[ ${#manual_installs[@]} -gt 0 ]]; then
        for install in "${manual_installs[@]}"; do
            echo -e "  ${GREEN}‚úì${NC} $install"
        done
    fi

    if [[ ${#alias_installs[@]} -gt 0 ]]; then
        for alias in "${alias_installs[@]}"; do
            echo -e "  ${GREEN}‚úì${NC} $alias"
        done
    fi

    echo -e "  ${GREEN}‚úì${NC} ~/.config/mole/ (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)"
    echo -e "  ${GREEN}‚úì${NC} ~/.cache/mole/ (–∫—ç—à)"

    if [[ "$is_homebrew" == "false" && ${#manual_installs[@]} -eq 0 && ${#alias_installs[@]} -eq 0 ]]; then
        echo ""
        echo -e "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Mole –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞${NC}"
        exit 0
    fi

    echo ""

    # Confirm removal
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å Mole? (y/N): " -n 1 -r
    echo ""

    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "–û—Ç–º–µ–Ω–µ–Ω–æ."
        exit 0
    fi

    echo ""
    log_info "–£–¥–∞–ª–µ–Ω–∏–µ Mole..."

    # Remove Homebrew installation
    if [[ "$is_homebrew" == "true" ]]; then
        if brew uninstall mole 2>&1 | grep -q "Uninstalling"; then
            log_success "–£–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Homebrew"
        else
            log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ Homebrew"
            echo "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é: brew uninstall mole"
        fi
    fi

    # Remove manual installations
    if [[ ${#manual_installs[@]} -gt 0 ]]; then
        for install in "${manual_installs[@]}"; do
            if [[ -f "$install" ]]; then
                if rm -f "$install" 2>/dev/null; then
                    log_success "–£–¥–∞–ª–µ–Ω–æ: $install"
                else
                    log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å $install (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å sudo)"
                fi
            fi
        done
    fi

    if [[ ${#alias_installs[@]} -gt 0 ]]; then
        for alias in "${alias_installs[@]}"; do
            if [[ -f "$alias" ]]; then
                if rm -f "$alias" 2>/dev/null; then
                    log_success "–£–¥–∞–ª–µ–Ω –∞–ª–∏–∞—Å: $alias"
                else
                    log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–ª–∏–∞—Å $alias (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è sudo)"
                fi
            fi
        done
    fi

    # Clean up cache first (logs to config)
    if [[ -d "$HOME/.cache/mole" ]]; then
        rm -rf "$HOME/.cache/mole" 2>/dev/null && log_success "–£–¥–∞–ª–µ–Ω –∫—ç—à"
    fi

    # Clean up configuration last (contains logs)
    if [[ -d "$HOME/.config/mole" ]]; then
        log_success "–£–¥–∞–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
        rm -rf "$HOME/.config/mole" 2>/dev/null
    fi

    echo ""
    echo -e "${GREEN}‚ú® Mole —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω${NC}"
    echo ""
    echo "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Mole!"

    exit 0
}

# Display main menu options
show_main_menu() {
    local selected="${1:-1}"
    local full_draw="${2:-true}"

    if [[ "$full_draw" == "true" ]]; then
        clear_screen
        echo ""
        show_brand_banner
        show_update_notification
        echo ""
        printf '\033[s'
    else
        printf '\033[u\033[0J'
    fi

    show_menu_option 1 "–û—á–∏—Å—Ç–∏—Ç—å Mac - –£–¥–∞–ª–∏—Ç—å –º—É—Å–æ—Ä –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å" "$([[ $selected -eq 1 ]] && echo true || echo false)"
    show_menu_option 2 "–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º" "$([[ $selected -eq 2 ]] && echo true || echo false)"
    show_menu_option 3 "–ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–∞ - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä" "$([[ $selected -eq 3 ]] && echo true || echo false)"
    show_menu_option 4 "–°–ø—Ä–∞–≤–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∏ —Å–æ–≤–µ—Ç—ã" "$([[ $selected -eq 4 ]] && echo true || echo false)"
    show_menu_option 5 "–í—ã—Ö–æ–¥ - –ó–∞–∫—Ä—ã—Ç—å Mole" "$([[ $selected -eq 5 ]] && echo true || echo false)"

    if [[ -t 0 ]]; then
        echo ""
        echo -e "  ${GRAY}‚Üë/‚Üì${NC} –ù–∞–≤–∏–≥–∞—Ü–∏—è  ${GRAY}|${NC}  ${GRAY}Enter${NC} –í—ã–±—Ä–∞—Ç—å  ${GRAY}|${NC}  ${GRAY}Q/ESC${NC} –í—ã—Ö–æ–¥"
    fi
}

# Interactive main menu loop
interactive_main_menu() {
    # Show intro animation only once per terminal tab
    if [[ -t 1 ]]; then
        local tty_name=$(tty 2>/dev/null || echo "")
        if [[ -n "$tty_name" ]]; then
            local flag_file="/tmp/mole_intro_$(echo "$tty_name" | tr -c '[:alnum:]_' '_')"
            if [[ ! -f "$flag_file" ]]; then
                animate_mole_intro
                touch "$flag_file" 2>/dev/null || true
            fi
        fi
    fi
    local current_option=1
    local first_draw=true
    cleanup_and_exit() {
        show_cursor
        echo ""
        echo "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Mole!"
        exit 0
    }

    trap cleanup_and_exit INT
    hide_cursor

    while true; do
        show_main_menu $current_option "$first_draw"
        if [[ "$first_draw" == "true" ]]; then
            first_draw=false
        fi

        local key=$(read_key)
        [[ $? -ne 0 ]] && continue

        case "$key" in
            "UP") ((current_option > 1)) && ((current_option--)) ;;
            "DOWN") ((current_option < 5)) && ((current_option++)) ;;
            "ENTER"|"$current_option")
                show_cursor
                case $current_option in
                    1)
                        exec "$SCRIPT_DIR/bin/clean.sh"
                        ;;
                    2) exec "$SCRIPT_DIR/bin/uninstall.sh" ;;
                    3) exec "$SCRIPT_DIR/bin/analyze.sh" ;;
                    4) clear; show_help; exit 0 ;;
                    5) cleanup_and_exit ;;
                esac
                ;;
            "QUIT") cleanup_and_exit ;;
            [1-5])
                show_cursor
                case $key in
                    1)
                        exec "$SCRIPT_DIR/bin/clean.sh"
                        ;;
                    2) exec "$SCRIPT_DIR/bin/uninstall.sh" ;;
                    3) exec "$SCRIPT_DIR/bin/analyze.sh" ;;
                    4) clear; show_help; exit 0 ;;
                    5) cleanup_and_exit ;;
                esac
                ;;
        esac
    done
}

main() {
    case "${1:-""}" in
        "clean")
            exec "$SCRIPT_DIR/bin/clean.sh" "${@:2}"
            ;;
        "uninstall")
            exec "$SCRIPT_DIR/bin/uninstall.sh"
            ;;
        "analyze")
            exec "$SCRIPT_DIR/bin/analyze.sh" "${@:2}"
            ;;
        "update")
            update_mole
            exit 0
            ;;
        "remove")
            remove_mole
            exit 0
            ;;
        "help"|"--help"|"-h")
            show_help
            exit 0
            ;;
        "version"|"--version"|"-V")
            show_version
            exit 0
            ;;
        "")
            check_for_updates
            interactive_main_menu
            ;;
        *)
            echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'mole --help' –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏."
            exit 1
            ;;
    esac
}

main "$@"
